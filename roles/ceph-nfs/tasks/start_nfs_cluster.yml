---
- name: Enable and start PCS daemon
  service:
    name: pcsd
    enabled: true
    state: started

- name: Enable corosync/pacemaker daemon
  service:
    name: "{{ item }}"
    enabled: true
    state: stopped
  loop:
    - corosync
    - pacemaker

- name: Generate a password for the user {{ pcmk_user }}
  set_fact:
    pcmk_password: "{{ ansible_machine_id | to_uuid }}"
  run_once: true
  when: pcmk_password is not defined

- name: Set user {{ pcmk_user }} password
  user:
    name: "{{ pcmk_user }}"
    password: "{{ pcmk_password | password_hash('sha512') }}"

- name: resolve hostnames
  set_fact: nfs_host_ips="{{ nfs_host_ips|default([]) + [ lookup('ip', '{{ item }}') ] }}"
  loop: "{{ ansible_play_batch }}"
  run_once: true

- name: Authenticate all nodes
  command: pcs host auth {{ nfs_host_ips | join(' ') }} -u "{{ pcmk_user }}" -p "{{ pcmk_password | quote }}"
  run_once: true
  args:
    creates: /var/lib/pcsd/tokens

- name: Setup message bus
  run_once: true
  command: pcs cluster setup {{ pcmk_cluster_name | quote }} {{  nfs_host_ips | join(' ') }}
  args:
    creates: /etc/corosync/corosync.conf

- name: Start the cluster
  command: pcs cluster start --all
  run_once: true

- name: Enable the cluster to start at boot time
  command: pcs cluster enable --all
  run_once: true

- name: Disable STONITH
  command: pcs property set stonith-enabled=false
  run_once: true

- name: Check for nfs_ganesha resource
  shell: "pcs resource show nfs_server"
  failed_when: false
  run_once: true
  register: nfs_resource_check

- name: Create NFS-Ganesha service resource
  command: pcs resource create nfs_server systemd:nfs-ganesha op monitor interval=10s
  run_once: true
  when: 
    - nfs_resource_check.rc == 1
    - ceph_nfs_server == 'ganesha'

- name: Create kernel nfs service resource
  command: pcs resource create nfs_server systemd:"{{ 'nfs-server' if ansible_facts['os_family'] == 'RedHat' else 'nfsserver' if ansible_facts['os_family'] == 'Suse' else 'nfs-kernel-server' if ansible_facts['os_family'] == 'Debian' }}" op monitor interval=10s
  run_once: true
  when:
    - nfs_resource_check.rc == 1
    - ceph_nfs_server == 'kernel'

- name: Check for nfs_ip resource
  shell: "pcs resource show nfs_ip"
  failed_when: false
  run_once: true
  register: ip_resource_check

- name: Create Floating IP for NFS service
  command: pcs resource create nfs_ip ocf:heartbeat:IPaddr2 ip={{ ceph_nfs_floating_ip_address }} cidr_netmask={{ ceph_nfs_floating_ip_cidr }} nic={{ ceph_nfs_floating_ip_interface }} op monitor interval=10s
  run_once: true
  when: ip_resource_check.rc == 1

- name: Check for resource constraint
  shell: "pcs constraint | grep 'nfs_server with nfs_ip'"
  failed_when: false
  run_once: true
  register: resource_constraint_check

- name: Set constraint on cluster resources
  command: pcs constraint colocation add nfs_server with nfs_ip INFINITY
  run_once: true
  when: 
    - resource_constraint_check.rc == 1

- name: set pcs tuning options
  command: pcs resource update nfs_ip op {{ item }} interval=0s timeout=5s
  run_once: true
  with_items:
    - start
    - stop

- name: set pcs tuning options
  command: pcs resource update nfs_server op {{ item }} interval=0s timeout=5s
  run_once: true
  with_items:
    - start
    - stop